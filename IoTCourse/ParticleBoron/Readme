Compliation of Example Codes for using a Particle Boron module.

See https://build.particle.io/build/new for more examples.

Community Forum: https://community.particle.io/
Documentation, Libraries, and Information: https://docs.particle.io/getting-started/getting-started/

Mobile IoT Lecture: https://docs.google.com/presentation/d/1Q6BtyAJkuxgiDf93eued6W5VuSJkEQHl/edit?usp=sharing&ouid=108026421816382490849&rtpof=true&sd=true

Particle Boron Tutorial: https://docs.google.com/presentation/d/1F2JrAsH2LX3t35Qc7HZM6-Hygel5GVGb/edit?usp=sharing&ouid=108026421816382490849&rtpof=true&sd=true

Assignment: https://docs.google.com/presentation/d/1F2JrAsH2LX3t35Qc7HZM6-Hygel5GVGb/edit?usp=sharing&ouid=108026421816382490849&rtpof=true&sd=true

Order:
  1) Readme
  2) WebConnectedLED - 
 // We are also going to declare a Particle.function() so that we can turn the LED on and off from the cloud.

  3) FunctionVariable - 
// In this example, we're going to register a Particle.variable() with the cloud so that we can read brightness levels from the photoresistor.
// We'll also register a Particle.function so that we can turn the LED on and off remotely.

  4) Boron_dbLED - 
// Similar to the webserver/database assignment with the ESP8266. Utilize an HTTP library from Particle to send a fake temperature and humidity sensor reading to the webserver to be stored in a database.
// At the same time, call on a different webserver to read the on/off button input

  5) Boron_dbLED_FV
